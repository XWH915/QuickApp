<template>
  <div class="wrapper">
    <text class="title">欢迎注册</text>
    <text class="tips">已有账号？<a id="login" onclick="login()">登录</a></text>
    <div class="username">
      <input class='input' type="text" placeholder='用户名' value="{{username}}" onchange="updateUsername"></input>
      <text class="icon"><span class="iconfont">&#xe828;</span></text>
    </div>
    <div class="phone">
      <input class='input' type="text" placeholder='手机号' value="{{phone}}" onchange="updatePhone"></input>
      <text class="icon"><span class="iconfont">&#xe85f;</span></text>
    </div>
    <div class="password">
      <input class='input' type="password" placeholder='密码' value="{{password}}" onchange="updatePassword"></input>
      <text class="icon"><span class="iconfont">&#xe600;</span></text>
    </div>
    <div class="code">
      <input class='input code-input' type="text" placeholder='验证码' value="{{code}}" onchange="updateCode"></input>
      <input if='{{!hasGetCode}}' class='code-btn' type="button" value='获取验证码' onclick="getCode()"></input>
      <input if='{{hasGetCode}}' class='code-btn1' type="button" value='已获取'></input>
      <text class="icon"><span class="iconfont">&#xe613;</span></text>
    </div>
    <input class='btn' type="button" value='注册' onclick="register()"></input>
  </div>
</template>

<script>
import storage from '@system.storage'
import router from '@system.router'
import fetch from '@system.fetch'
import prompt from '@system.prompt'
import vibrator from '@system.vibrator'

export default {
  data() {
    return {
      username: '',
      phone: '',
      password: '',
      code: '',
      hasGetCode: false,
    }
  },

  updateUsername(e) {
    this.username = e.value;
  },

  updatePhone(e) {
    this.phone = e.value;
  },

  updatePassword(e) {
    this.password = e.value;
  },

  updateCode(e) {
    this.code = e.value;
  },

  login() {
    router.back();
  },

  getCode() {
    // 调用验证码接口（暂不实现）
    this.hasGetCode=true;
  },

  register() {
    let that=this;
    const username = this.username;
    const phone = this.phone;
    const password = this.password;
    const code = this.code;
    const hasGetCode = this.hasGetCode;

    if (typeof username === "string" && username.trim().length === 0) {
      prompt.showToast({
        message: '请输入用户名'
      })
      return;
    }
    if (typeof phone === "string" && phone.trim().length === 0) {
      prompt.showToast({
        message: '请输入手机号'
      })
      return;
    }
    if (typeof password === "string" && password.trim().length === 0) {
      prompt.showToast({
        message: '请输入密码'
      })
      return;
    }
    if (!hasGetCode || (typeof code === "string" && code.trim().length === 0)) {
      prompt.showToast({
        message: '请正确输入验证码'
      })
      return;
    }
    
    // 调用注册接口
    fetch.fetch({
      url: 'http://'+that.$app.$data.IP+'/register?username='+username+'&phone='+phone+'&password='+password,
      responseType: 'text'
    }).then(res => {
      const result=JSON.parse(res.data.data);
      console.log(result);
      if(result.code==1){
        prompt.showToast({
          message: result.data.message
        })
        if(result.data.result){
          vibrator.vibrate({ mode: 'short' });
          storage.set({
            key: 'phone|||password',
            value: phone+'|||'+password,
            success: function(data) {
              console.log('handling success')
            },
            fail: function(data, code) {
              console.log(`handling fail, code = ${code}`)
            }
          })
          this.login();
        }
      }else{
        prompt.showToast({
          message: result.message
        })
      }
    }).catch(error => {
      console.log(`handling fail, errMsg = ${error.data}`)
      console.log(`handling fail, errCode = ${error.code}`)
      prompt.showToast({
        message: '服务器发生未知错误，请稍后重试'
      })
    })
  }
}
</script>

<style lang="less">
@font-face {
  font-family: iconfont;
  src: url("../../assets/iconfont/iconfont.ttf");
}
.iconfont {
  font-family: iconfont;
  font-size: 32px;
}

.wrapper {
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.title {
  color: #7adbd4;
  font-weight: 700;
  font-size: 80px;
  margin-bottom: 20px;
}
.tips {
  font-size: 30px;
  margin-bottom: 80px;
}
#login {
  color: #7adbd4;
}
.input {
  width: 100%;
  padding: 20px;
  padding-left: 60px;
  margin-bottom: 40px;
  font-size: 34px;
  border: 1px solid #ccc;
  background-color: #f2f2f2;
}
.icon {
  position: absolute;
  left: 20px;
  top: 27px;
  z-index: 999;
}
.username, .phone, .password {
  width: 60%;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
}
.code {
  width: 60%;
  justify-content: space-between;
  margin-bottom: 40px;
  position: relative;
}
.code-input {
  width: 60%;
  margin-bottom: 0;
  /* margin-right: 20px; */
}
.code-btn{
  background-color: #f2f2f2;
  font-size: 28px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 20px;
}
.code-btn1{
  background-color: #fff;
  font-size: 28px;
  padding: 10px;
}
.btn {
  background-color: #7adbd4;
  color: #fff;
  font-size: 40px;
  padding: 20px 50px;
  border-radius: 20px;
  margin-top: 40px;
}
</style>