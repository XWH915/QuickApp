<template>
  <div class="wrapper">
    <text class="title">拼呗</text>
    <text class="tips">区域性的线下拼单平台</text>
    <div class="phone">
      <input class='input' type="text" placeholder='手机号' value="{{phone}}" onchange="updatePhone"></input>
      <text class="icon"><span class="iconfont">&#xe85f;</span></text>
    </div>
    <div class="password">
      <input class='input' type="password" placeholder='密码' value="{{password}}" onchange="updatePassword"></input>
      <text class="icon"><span class="iconfont">&#xe600;</span></text>
    </div>
    <div class="btn-wrap">
      <input class='btn left' type="button" value='登录' onclick="login()"></input>
      <input class='btn' type="button" value='注册' onclick="register()"></input>
    </div>
  </div>
</template>

<script>
import storage from '@system.storage'
import router from '@system.router'
import fetch from '@system.fetch'
import prompt from '@system.prompt'
import vibrator from '@system.vibrator'

export default {
  data() {
    return {
      phone: '',
      password: '',
    }
  },

  onShow() {
    let that=this;
    // 自动填入账号密码
    storage.get({
      key: 'phone|||password',
      success: function(data) {
        console.log('handling success')
        const arr = data.split("|||");
        that.phone=arr[0];
        that.password=arr[1];
      },
      fail: function(data, code) {
        console.log(`111handling fail, code = ${code}`)
      }
    })
  },

  updatePhone(e) {
    this.phone = e.value;
  },

  updatePassword(e) {
    this.password = e.value;
  },

  login() {
    let that=this;
    const phone = this.phone;
    const password = this.password;

    if (typeof phone === "string" && phone.trim().length === 0) {
      prompt.showToast({
        message: '请输入手机号'
      })
      return;
    }
    if (typeof password === "string" && password.trim().length === 0) {
      prompt.showToast({
        message: '请输入密码'
      })
      return;
    }

    // 调用登录接口
    fetch.fetch({
      url: 'http://'+that.$app.$data.IP+'/login?phone='+phone+'&password='+password,
      responseType: 'text'
    }).then(res => {
      const result=JSON.parse(res.data.data);
      console.log(result);
      if(result.code==1){
        prompt.showToast({
          message: result.data.message
        })
        if(result.data.result){
          vibrator.vibrate({ mode: 'short' });
          storage.set({
            key: 'phone|||password',
            value: phone+'|||'+password,
            success: function(data) {
              console.log('handling success')
            },
            fail: function(data, code) {
              console.log(`111handling fail, code = ${code}`)
            }
          })
          storage.set({
            key: 'userid|||username',
            value: result.data.userid+'|||'+result.data.username,
            success: function(data) {
              console.log('handling success')
            },
            fail: function(data, code) {
              console.log(`111handling fail, code = ${code}`)
            }
          })
          router.push({
            uri: "pages/PostList"
          })
        }
      }else{
        prompt.showToast({
          message: result.message
        })
      }
    }).catch(error => {
      console.log(`handling fail, errMsg = ${error.data}`)
      console.log(`handling fail, errCode = ${error.code}`)
      prompt.showToast({
        message: '服务器发生未知错误，请稍后重试'
      })
    })
  },

  register() {
    console.log('注册');
    router.push({
      uri: "pages/Register"
    })
  }
}
</script>

<style lang="less">
@font-face {
  font-family: iconfont;
  src: url("../../assets/iconfont/iconfont.ttf");
}
.iconfont {
  font-family: iconfont;
  font-size: 32px;
}

.wrapper {
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.title {
  color: #7adbd4;
  font-weight: 700;
  font-size: 80px;
  margin-bottom: 20px;
}
.tips {
  color: #7adbd4;
  font-size: 30px;
  margin-bottom: 80px;
}
.phone, .password {
  width: 60%;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
}
.input {
  width: 100%;
  padding: 20px;
  padding-left: 60px;
  margin-bottom: 40px;
  font-size: 34px;
  border: 1px solid #ccc;
  background-color: #f2f2f2;
}
.icon {
  position: absolute;
  left: 20px;
  top: 27px;
  z-index: 999;
}
.btn {
  background-color: #7adbd4;
  color: #fff;
  font-size: 40px;
  padding: 20px 50px;
  border-radius: 20px;
  margin-top: 40px;
}
.left{
  margin-right: 40px;
}
</style>