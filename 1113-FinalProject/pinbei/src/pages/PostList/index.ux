<template>
  <div class="wrapper">
    <!-- 搜索框 -->
    <div class="search-wrap">
      <input class='search {{isSearching?"searching":""}}' type="text" placeholder='搜索' value="{{searchValue}}" onchange="updateSearchValue" onfocus="changeSearchState" onblur="changeSearchState"></input>
      <input if="{{isSearching}}" class='btn' type="button" value='搜索' onclick="search()"></input>
      <text class="search-icon"><span class="iconfont">&#xe840;</span></text>
    </div>
    <!-- 广告栏 -->
    <div class="swiper-container">
      <swiper class="swiper swiper-animation" autoplay="true" interval="3000" indicator="true" duration="1000" loop="true" enableswipe="true" style="indicatorBottom: 20px;">
        <text class="item color-1">广告1</text>
        <text class="item color-2">广告2</text>
        <text class="item color-3">广告3</text>
      </swiper>
    </div>
    <!-- 帖子列表 -->
    <div class="post-list-container">
      <div if="{{Array.isArray(posts) && posts.length}}" class="post-wrap" for="{{posts}}" onclick="clickPost($item)">
        <div class="row1">
          <text>{{$item.title}}</text>
        </div>
        <div class="row2">
          <text>{{$item.content}}</text>
        </div>
        <div class="row3">
          <text>{{$item.userName}}</text>
          <text>{{$item.time}}</text>
        </div>
      </div>
      <div else class="no-post">
        <text>暂无数据</text>
      </div>
    </div>
    <!-- 新增按钮 -->
    <input class='add-btn' type="button" value='+' onclick="addPost()"></input>
  </div>
</template>

<script>
import storage from '@system.storage'
import router from '@system.router'
import fetch from '@system.fetch'
import prompt from '@system.prompt'
import vibrator from '@system.vibrator'

export default {
  data() {
    return {
      searchValue: '',
      isSearching: false,
      posts: [],
    }
  },

  updateSearchValue(e) {
    this.searchValue = e.value;
  },

  changeSearchState() {
    this.isSearching = !this.isSearching;
  },

  search() {
    let that=this;
    const searchValue = this.searchValue;

    // 调用搜索接口
    fetch.fetch({
      url: 'http://'+that.$app.$data.IP+'/search?keyword='+searchValue,
      responseType: 'text'
    }).then(res => {
      const result=JSON.parse(res.data.data);
      console.log(result);
      if(result.code==1){
        vibrator.vibrate({ mode: 'short' });
        that.posts=result.data.posts;
      }else{
        prompt.showToast({
          message: result.message
        })
      }
    }).catch(error => {
      console.log(`handling fail, errMsg = ${error.data}`)
      console.log(`handling fail, errCode = ${error.code}`)
      prompt.showToast({
        message: '服务器发生未知错误，请稍后重试'
      })
    })
  },

  clickPost(post) {
    router.push({
      uri: "pages/PostDetail",
      params: { id: post.postId }
    })
  },

  addPost() {
    router.push({
      uri: "pages/AddPost"
    })
  },

  onShow() {
    let that=this;
    // 调用获取所有帖子接口
    fetch.fetch({
      url: 'http://'+that.$app.$data.IP+'/getAllPosts',
      responseType: 'text'
    }).then(res => {
      const result=JSON.parse(res.data.data);
      console.log(result);
      if(result.code==1){
        that.posts=result.data.posts;
      }else{
        prompt.showToast({
          message: result.message
        })
      }
    }).catch(error => {
      console.log(`handling fail, errMsg = ${error.data}`)
      console.log(`handling fail, errCode = ${error.code}`)
      prompt.showToast({
        message: '服务器发生未知错误，请稍后重试'
      })
    })
  },
}
</script>

<style lang="less">
@font-face {
  font-family: iconfont;
  src: url("../../assets/iconfont/iconfont.ttf");
}
.iconfont {
  font-family: iconfont;
  font-size: 34px;
}

.wrapper {
  flex-direction: column;
  /* justify-content: center; */
  align-items: center;
}
.search-wrap {
  position: relative;
  width: 100%;
  padding: 20px;
  justify-content: space-between;
  align-items: center;
}
.search-icon {
  position: absolute;
  left: 50px;
  top: 45px;
  z-index: 999;
}
.search {
  width: 100%;
  height: 80px;
  padding: 0 30px 0 70px;
  font-size: 34px;
  border: 1px solid #ccc;
  border-radius: 40px;
  background-color: #f2f2f2;
}
.searching{
  width: 80%;
}
.btn {
  width: 17%;
  height: 80px;
  font-size: 34px;
  border-radius: 20px;
  background-color: #7adbd4;
  color: #fff;
}

.swiper-container {
  width: 100%;
  flex-direction: column;
}
.swiper {
  flex-direction: column;
  height: 250px;
}
.item-content_title {
  flex: 1;
  padding-top: 20px;
  padding-bottom: 20px;
}
.item_left {
  padding: 20px;
}
.switch {
  height: 50px;
  width: 320px;
}
.slider {
  width: 100%;
  padding-left: 50px;
  padding-right: 50px;
}
.item {
  height: 250px;
  text-align: center;
  color: #ffffff;
}
.color-1 {
  background-color: #09ba07;
}
.color-2 {
  background-color: #f76160;
}
.color-3 {
  background-color: #0faeff;
}
.swiper-animation {
  page-transform-origin: 0px 0px;
  animation-timing-function: linear;
}

.post-list-container {
  width: 100%;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.post-wrap {
  width: 100%;
  flex-direction: column;
  justify-content: center;
  /* align-items: center; */
  border: 1px solid #ccc;
  padding: 20px;
}
.row1 {
  margin-bottom: 10px;
  text {
    color: #000;
    font-size: 38px;
    /* 单行省略 */
    lines: 1;
    text-overflow: ellipsis;
  }
}
.row2 {
  margin-bottom: 10px;
  text {
    color: #666;
    font-size: 30px;
    /* 多行省略 */
    lines: 3;
    text-overflow: ellipsis;
  }
}
.row3 {
  justify-content: space-between;
}
.no-post {
  padding: 20px;
}

.add-btn {
  position: fixed;
  bottom: 100px;
  right: 100px;

  width: 150px;
  height: 150px;
  font-size: 75px;
  border-radius: 75px;
  background-color: #7adbd4;
  color: #fff;
}
</style>